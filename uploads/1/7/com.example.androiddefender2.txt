*************************************************************************
**   AndroBugs Framework - Android App Security Vulnerability Scanner  **
**                            version: 1.0.0                           **
**     author: Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)     **
**               contact: androbugs.framework@gmail.com                **
*************************************************************************
Platform: Android
Package Name: com.example.androiddefender2
Package Version Name: 1.0
Package Version Code: 1
Min Sdk: 9
Target Sdk: 16
MD5   : 0a9d7da32cf6d7db5b6407321b673d3e
SHA1  : 30b6d55096b008a2dc7b54382f094568346362ef
SHA256: 8bc0f8a088ead0745b5c4f12d3044c253f70a7ff368aef1e64ebbea3fcc51e9e
SHA512: 2fd12c882d41ffd4011e4e2d4cea39fe3ac3b4466273bd61a2682d3e3e30fd56c9f43455a8dce05bbf7aa20f737ce2df10ae9f255205af034c57a133d0df8263
Analyze Signature: ae5e0f8e77c61e1a853187e80f82b2f68bc8b6232a0562270b9b5a79bb14615d5dc5cb09b985d3fd0a848fa3c9800b8cd03c7a7874c2a19e4ca3afd8e2841da9
------------------------------------------------------------------------------------------------
[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total:1):
               http://defenderandroid.org
                   => Lcom/example/androiddefender2/SupportActivity;->onCreate(Landroid/os/Bundle;)V
[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Lcom/worker/androiddefender2/FilesWorker;->getListFilesSDCard(Ljava/io/File;
                    Landroid/widget/ProgressBar;)Ljava/util/ArrayList; (0xe) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/example/androiddefender2/SingleScanActivity$getScanInfo;->doInBackground([Ljava/io/File;)Ljava/lang/Void; (0x50) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/example/androiddefender2/SingleScanActivity$getScanInfo;->doInBackground([Ljava/io/File;)Ljava/lang/Void; (0x11a)
                    ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/example/androiddefender2/ScanningActivity$getScanInfo;->doInBackground([Ljava/io/File;)Ljava/lang/Void; (0x3c) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/example/androiddefender2/ScanningActivity$getScanInfo;->doInBackground([Ljava/io/File;)Ljava/lang/Void; (0xda) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
[Warning]  AndroidManifest Exported Components Checking:
           Found "exported" components(except for Launcher) for receiving outside applications' actions (AndroidManifest.xml).
           These components can be initilized by other apps. You should add or modify the attribute to [exported="false"] if you don't want
           to.
           You can also protect it with a customized permission with "signature" or higher protectionLevel and specify in
           "android:permission" attribute.
                 receiver => com.example.androiddefender2.DefenderAppWidgetProvider
[Warning] <WebView> WebView Local File Access Attacks Checking:
           Found "setAllowFileAccess(true)" or not set(enabled by default) in WebView. The attackers could inject malicious script into
           WebView and exploit the opportunity to access local resources. This can be mitigated or prevented by disabling local file system
           access. (It is enabled by default)
           Note that this enables or disables file system access only. Assets and resources are still accessible using file:///android_asset
           and file:///android_res.
           The attackers can use "mWebView.loadUrl("file:///data/data/[Your_Package_Name]/[File]");" to access app's local file.
           Reference: (1)https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/
                      (2)http://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)
           Please add or modify "yourWebView.getSettings().setAllowFileAccess(false)" to your WebView:
               Lcom/example/androiddefender2/BySupportActivity;->onCreate(Landroid/os/Bundle;)V
               Lcom/example/androiddefender2/PayFormActivity;->onCreate(Landroid/os/Bundle;)V
               Lcom/example/androiddefender2/SupportActivity;->onCreate(Landroid/os/Bundle;)V
[Warning] <WebView> WebView Potential XSS Attacks Checking:
           Found "setJavaScriptEnabled(true)" in WebView, which could exposed to potential XSS attacks. Please check the web page code
           carefully and sanitize the output:
               => Lcom/example/androiddefender2/BySupportActivity;->onCreate(Landroid/os/Bundle;)V (0xc6) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/example/androiddefender2/PayFormActivity;->onCreate(Landroid/os/Bundle;)V (0xa4) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases.
           Prior to Android 4.0, Android has SQLite Journal Information Disclosure Vulnerability.
           But it can only be solved by users upgrading to Android > 4.0 and YOU CANNOT SOLVE IT BY YOURSELF (But you can use encrypt your
           databases and Journals by "SQLCipher" or other libs).
           Proof-Of-Concept Reference:
           (1) http://blog.watchfire.com/files/androidsqlitejournal.pdf
           (2) http://www.youtube.com/watch?v=oCXLHjmH5rY
[Notice]  AndroidManifest Exported Components Checking 2:
           Found "exported" components(except for Launcher) for receiving Google's "Android" actions (AndroidManifest.xml):
                 receiver => com.worker.androiddefender2.CallReceiver
                 receiver => com.worker.androiddefender2.MessageReceiver
                 receiver => com.worker.androiddefender2.ServiceStarter
[Notice]  Security Classes Checking:
           Find some security-related class names:
               Lcom/j256/ormlite/table/DatabaseTableConfigLoader;
               Lcom/j256/ormlite/table/DatabaseTableConfig;
               Lcom/j256/ormlite/dao/DaoManager$TableConfigConnectionSource;
               Lcom/j256/ormlite/dao/BaseDaoImpl$DaoConfigArray;
               Lcom/j256/ormlite/android/DatabaseTableConfigUtil$DatabaseFieldSample;
               Lcom/j256/ormlite/android/DatabaseTableConfigUtil;
               Lcom/j256/ormlite/android/apptools/OrmLiteConfigUtil$1;
               Lcom/j256/ormlite/android/apptools/OrmLiteConfigUtil;
               Lcom/j256/ormlite/field/DatabaseFieldConfig;
               Lcom/j256/ormlite/field/DatabaseFieldConfigLoader;
               Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;
               Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig$1;
               Lcom/example/androiddefender2/SettingsActivity;
               Lcom/example/androiddefender2/SettingsActivity$1;
               Lcom/example/androiddefender2/BuildConfig;
[Notice]  Security Methods Checking:
           Find some security-related method names:
               Lcom/j256/ormlite/db/DatabaseType;->extractDatabaseTableConfig(Lcom/j256/ormlite/support/ConnectionSource;
                    Ljava/lang/Class;)Lcom/j256/ormlite/table/DatabaseTableConfig;
               Lcom/j256/ormlite/db/BaseDatabaseType;->configureGeneratedId(Ljava/lang/String; Ljava/lang/StringBuilder;
                    Lcom/j256/ormlite/field/FieldType; Ljava/util/List; Ljava/util/List; Ljava/util/List; Ljava/util/List;)V
               Lcom/j256/ormlite/db/BaseDatabaseType;->configureGeneratedIdSequence(Ljava/lang/StringBuilder;
                    Lcom/j256/ormlite/field/FieldType; Ljava/util/List; Ljava/util/List; Ljava/util/List;)V
               Lcom/j256/ormlite/db/BaseDatabaseType;->configureId(Ljava/lang/StringBuilder; Lcom/j256/ormlite/field/FieldType;
                    Ljava/util/List; Ljava/util/List; Ljava/util/List;)V
               Lcom/j256/ormlite/db/BaseDatabaseType;->extractDatabaseTableConfig(Lcom/j256/ormlite/support/ConnectionSource;
                    Ljava/lang/Class;)Lcom/j256/ormlite/table/DatabaseTableConfig;
               Lcom/j256/ormlite/db/BaseSqliteDatabaseType;->configureGeneratedId(Ljava/lang/String; Ljava/lang/StringBuilder;
                    Lcom/j256/ormlite/field/FieldType; Ljava/util/List; Ljava/util/List; Ljava/util/List; Ljava/util/List;)V
               Lcom/j256/ormlite/db/SqliteAndroidDatabaseType;->extractDatabaseTableConfig(Lcom/j256/ormlite/support/ConnectionSource;
                    Ljava/lang/Class;)Lcom/j256/ormlite/table/DatabaseTableConfig;
               Lcom/j256/ormlite/table/DatabaseTableConfigLoader;->loadDatabaseConfigFromReader(Ljava/io/BufferedReader;)Ljava/util/List;
               Lcom/j256/ormlite/table/DatabaseTableConfigLoader;->writeConfig(Ljava/io/BufferedWriter;
                    Lcom/j256/ormlite/table/DatabaseTableConfig;)V
               Lcom/j256/ormlite/table/DatabaseTableConfig;->convertFieldConfigs(Lcom/j256/ormlite/support/ConnectionSource;
                    Ljava/lang/String; Ljava/util/List;)[Lcom/j256/ormlite/field/FieldType;
               Lcom/j256/ormlite/table/DatabaseTableConfig;->getFieldConfigs()Ljava/util/List;
               Lcom/j256/ormlite/table/DatabaseTableConfig;->setFieldConfigs(Ljava/util/List;)V
               Lcom/j256/ormlite/logger/LocalLog;->configureClassLevels(Ljava/io/InputStream;)Ljava/util/List;
               Lcom/j256/ormlite/misc/JavaxPersistence;->createFieldConfig(Lcom/j256/ormlite/db/DatabaseType;
                    Ljava/lang/reflect/Field;)Lcom/j256/ormlite/field/DatabaseFieldConfig;
               Lcom/j256/ormlite/dao/BaseDaoImpl;->getTableConfig()Lcom/j256/ormlite/table/DatabaseTableConfig;
               Lcom/j256/ormlite/dao/BaseDaoImpl;->setTableConfig(Lcom/j256/ormlite/table/DatabaseTableConfig;)V
               Lcom/j256/ormlite/dao/DaoManager;->addCachedDatabaseConfigs(Ljava/util/Collection;)V
               Lcom/j256/ormlite/dao/DaoManager;->createDaoFromConfig(Lcom/j256/ormlite/support/ConnectionSource;
                    Ljava/lang/Class;)Ljava/lang/Object;
               Lcom/j256/ormlite/dao/DaoManager;->registerDaoWithTableConfig(Lcom/j256/ormlite/support/ConnectionSource;
                    Lcom/j256/ormlite/dao/Dao;)V
               Lcom/j256/ormlite/android/DatabaseTableConfigUtil;->assignConfigField(I Lcom/j256/ormlite/field/DatabaseFieldConfig;
                    Ljava/lang/reflect/Field; Ljava/lang/Object;)V
               Lcom/j256/ormlite/android/DatabaseTableConfigUtil;->buildConfig(Lcom/j256/ormlite/field/DatabaseField; Ljava/lang/String;
                    Ljava/lang/reflect/Field;)Lcom/j256/ormlite/field/DatabaseFieldConfig;
               Lcom/j256/ormlite/android/DatabaseTableConfigUtil;->configFieldNameToNum(Ljava/lang/String;)I
               Lcom/j256/ormlite/android/DatabaseTableConfigUtil;->configFromField(Lcom/j256/ormlite/db/DatabaseType; Ljava/lang/String;
                    Ljava/lang/reflect/Field;)Lcom/j256/ormlite/field/DatabaseFieldConfig;
               Lcom/j256/ormlite/android/apptools/OrmLiteConfigUtil;->writeConfigFile(Ljava/io/File;)V
               Lcom/j256/ormlite/android/apptools/OrmLiteConfigUtil;->writeConfigFile(Ljava/io/File; Ljava/io/File;)V
               Lcom/j256/ormlite/android/apptools/OrmLiteConfigUtil;->writeConfigFile(Ljava/io/File; [Ljava/lang/Class;)V
               Lcom/j256/ormlite/android/apptools/OrmLiteConfigUtil;->writeConfigFile(Ljava/io/OutputStream; Ljava/io/File;)V
               Lcom/j256/ormlite/android/apptools/OrmLiteConfigUtil;->writeConfigFile(Ljava/io/OutputStream; [Ljava/lang/Class;)V
               Lcom/j256/ormlite/android/apptools/OrmLiteConfigUtil;->writeConfigFile(Ljava/lang/String;)V
               Lcom/j256/ormlite/android/apptools/OrmLiteConfigUtil;->writeConfigFile(Ljava/lang/String; [Ljava/lang/Class;)V
               Lcom/j256/ormlite/android/apptools/OrmLiteConfigUtil;->writeConfigForTable(Ljava/io/BufferedWriter; Ljava/lang/Class;)V
               Lcom/j256/ormlite/field/DatabaseFieldConfig;->getForeignTableConfig()Lcom/j256/ormlite/table/DatabaseTableConfig;
               Lcom/j256/ormlite/field/DatabaseFieldConfig;->setForeignTableConfig(Lcom/j256/ormlite/table/DatabaseTableConfig;)V
               Lcom/j256/ormlite/field/FieldType;->configDaoInformation(Lcom/j256/ormlite/support/ConnectionSource; Ljava/lang/Class;)V
               Lcom/j256/ormlite/field/FieldType;->getDataTypeConfigObj()Ljava/lang/Object;
               Lcom/j256/ormlite/field/DatabaseFieldConfigLoader;->writeConfig(Ljava/io/BufferedWriter;
                    Lcom/j256/ormlite/field/DatabaseFieldConfig; Ljava/lang/String;)V
               Lcom/j256/ormlite/field/DataPersister;->makeConfigObject(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;
               Lcom/j256/ormlite/field/types/BaseDataType;->makeConfigObject(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;
               Lcom/j256/ormlite/field/types/EnumIntegerType;->makeConfigObject(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;
               Lcom/j256/ormlite/field/types/EnumStringType;->makeConfigObject(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;
               Lcom/j256/ormlite/field/types/BaseDateType;->convertDateStringConfig(Lcom/j256/ormlite/field/FieldType; Lcom/j256/ormlite/fie
                    ld/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;
               Lcom/j256/ormlite/field/types/DateStringType;->makeConfigObject(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;
               Lcom/j256/ormlite/field/types/DateType;->getDefaultDateFormatConfig()Lcom/j256/ormlite/field/types/BaseDateType$DateStringFor
                    matConfig;
               Lcom/j256/ormlite/field/types/SqlDateType;->getDefaultDateFormatConfig()Lcom/j256/ormlite/field/types/BaseDateType$DateString
                    FormatConfig;
               Lcom/worker/androiddefender2/SystemFunctions;->getSettingOtstukTag(Landroid/content/Context;
                    Ljava/lang/String;)Ljava/lang/String;
               Lcom/example/androiddefender2/ScanActivity;->PrepareSettings()V
               Lcom/example/androiddefender2/ScanActivity;->SaveSettings()V
               Lcom/example/androiddefender2/DefenderApplication;->firstCreateAppSettings()V
               Lcom/example/androiddefender2/DBHelper;->getOneScanSettingsRow(Ljava/lang/String;)Landroid/database/Cursor;
               Lcom/example/androiddefender2/SettingsActivity;->saveAppSettings()V
[Info]  AndroidManifest Adb Backup Checking:
           This app has disabled Adb Backup.
[Info] <Command> Runtime Command Checking:
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Command> Executing "root" or System Privilege Checking:
           Did not find codes checking "root" permission(su) or getting system permission (It's still possible we did not find out).
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" you're not using it.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info]  File Unsafe Delete Checking:
           Did not detect that you are unsafely deleting files.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> Framework - MonoDroid:
           This app is NOT using MonoDroid Framework (http://xamarin.com/android).
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Did not detect codes for checking "ApplicationInfo.FLAG_DEBUGGABLE" in AndroidManifest.xml.
[Info] <Hacker> APK Installing Source Checking:
           Did not detect this app checks for APK installer sources.
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keysotre):
[Info] <KeyStore><Hacker> KeyStore Protection Checking:
           Ignore checking KeyStore protected by password or not because you're not using KeyStore.
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info] <Signature><Hacker> Getting Signature Code Checking:
           Did not detect this app is checking the signature in the code.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  Native Library Loading Checking:
           No native library loaded.
[Info]  Native Methods Checking:
           No native method found.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info] <Implicit_Intent> Implicit Service Checking:
           No dangerous implicit service.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info] <Sensitive_Information> Getting IMEI and Device ID:
           Did not detect this app is getting the "device id(IMEI)" by "TelephonyManager.getDeviceId()" approach.
[Info] <Sensitive_Information> Getting ANDROID_ID:
           Did not detect this app is getting the 64-bit number "Settings.Secure.ANDROID_ID".
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           Did not detect critical usage of "WebViewClient"(MITM Vulnerability).
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 1.928428 secs
Total elapsed time: 7.023725 secs
